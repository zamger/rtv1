
int 	intersect_ray_con_inf(t_ray *r, t_con *con, float *t)
{

	t_discr d;

 	d.dist = vector_sub(&r->start, &con->pos);
	d.vva = vector_dot(&r->dir, &con->dir);
	d.dpva = vector_dot(&d.dist, &con->dir);
	d.temp1 = vector_scale(d.vva, &con->dir);
	d.temp2 = vector_scale(d.dpva, &con->dir);
	d.temp1 = vector_sub(&r->dir, &d.temp1);
	d.temp2 = vector_sub(&d.dist, &d.temp2);

	d.a = con->cosa_sq * vector_dot(&d.temp1, &d.temp1) - con->sina_sq * powf(d.vva, 2);

	d.b = 2 * (con->cosa_sq * vector_dot(&d.temp1, &d.temp2) - con->sina_sq * d.vva * d.dpva);
	
	d.c = (vector_dot(&d.temp2, &d.temp2) - con->sina_sq * powf(d.dpva, 2));

	d.discr = d.b * d.b - 4 * d.a * d.c;
	return(discr(d, t));
}


void		norm_cone(t_base *b, t_con *c)
{
	float cosa;

	b->new_start = vector_scale(b->t, &b->r.dir);
	b->new_start = vector_add(&b->new_start, &b->r.start);

	b->scale1 = vector_sub(&b->new_start, &c->pos);
	cosa = vector_dot(&b->scale1, &c->dir) /
		(vector_dot(&b->scale1, &b->scale1) * vector_dot(&c->dir, &c->dir));
	b->n = vector_sub(&b->scale1, (vector_scale(cosa,  &c->dir), &c->dir));
	b->scale = vector_multpl(&b->scale1, &b->n);
	b->n = vector_multpl(&b->scale, &b->scale1);

} 

void	init_con_inf(t_con *con)
{
	con[0].pos.x = H_W-300-H_W;
	con[0].pos.y = 200-H_H;
	con[0].pos.z = -10;
	con[0].angle = (15*M_PI/180);
	con[0].dir.x = 1;
	con[0].dir.y = 0;
	con[0].dir.z = 0;
	con[0].mat.diffuse.r = 1;
	con[0].mat.diffuse.g = 1;
	con[0].mat.diffuse.b = 1;
	con[0].mat.refl = 1;
	con[0].sina_sq = powf(sinf(con[0].angle), 2);
	con[0].cosa_sq = powf(cosf(con[0].angle), 2);
	printf("cos = %f angle =%f pi = %f\n", cosf(con[0].angle), sinf( con[0].angle), M_PI );
}
	// keycode == 124 ? im->b.move_x -= 10 : 0;
	// keycode == 123 ? im->b.move_x += 10 : 0;
	// keycode == 125 ? im->b.move_y -= 10 : 0;
	// keycode == 126 ? im->b.move_y += 10 : 0;
// void		menu(t_grid *grid, int keycode)
// {
// 	if ((grid->flag_m == 0 && keycode == 46) ||
// 			(grid->flag_m != 0 && keycode != 46))
// 	{
// 		mlx_string_put(grid->mlx, grid->win, 10, 10,
// 			0xFF00FF, "MENU");
// 		mlx_string_put(grid->mlx, grid->win, 10, 30,
// 			0xFF0000, "TURN ox KEY: a d");
// 		mlx_string_put(grid->mlx, grid->win, 10, 50,
// 			0x00FF00, "TURN oy KEY: s w");
// 		mlx_string_put(grid->mlx, grid->win, 10, 70,
// 			0x0000FF, "TURN oz KEY: q e");
// 		mlx_string_put(grid->mlx, grid->win, 10, 90,
// 			0x6060FF, "MOVE KEY: arrows");
// 		mlx_string_put(grid->mlx, grid->win, 10, 110,
// 			0x00FF0F, "SCALE KEY:  + -");
// 		grid->flag_m = 1;
// 	}
// 	else if (grid->flag_m == 1)
// 		grid->flag_m = 0;
// }
